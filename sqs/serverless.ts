import type { AWS } from '@serverless/typescript';

const serverlessConfiguration: AWS = {
  service: 'sqs-example',
  useDotenv: true,
  variablesResolutionMode: '20210219',
  configValidationMode: 'warn',
  frameworkVersion: '*',
  custom: {
    webpack: {
      webpackConfig: './webpack.config.js',
      includeModules: true,
      forceExclude: ['aws-sdk', 'sqlite3'],
      exculdeFiles: './src/modules/**/services/**/*.spec.ts',
    },
    apiGatewayTags: {
      Owner: 'mrcarromesa',
      Product: 'SQSExample',
      Service: 'SQSExample',
    },
    profiles: {
      local: 'local',
      dev: 'dev',
    },
    sharedBucketName: 'lambda-artifacts-123409abdvlgf',
    'serverless-offline-sqs': {
      apiVersion: '2012-11-05',
      endpoint: 'http://localhost:9324',
      region: 'us-east-1',
      accessKeyId: 'root',
      secretAccessKey: 'root',
      skipCacheInvalidation: false,
    },
    'serverless-offline-sqs-dlq': {
      process_boleto_from_erp: {
        onError: 'catch_queue_errors',
        maxReceiveCount: 3,
      },
    },
  },

  plugins: [
    'serverless-webpack',
    'serverless-offline',
    'serverless-dotenv-plugin',
    'serverless-offline-sqs',
    'serverless-offline-sqs-dlq',
  ],
  provider: {
    name: 'aws',
    runtime: 'nodejs14.x',
    region: 'us-east-1',
    profile: "${self:custom.profiles.${env:stage, 'dev'}, 'default'}",
    deploymentBucket: {
      blockPublicAccess: true, // Prevents public access via ACLs or bucket policies. Default is false
      skipPolicySetup: false, // Prevents creation of default bucket policy when framework creates the deployment bucket. Default is false
      // Pelo visto o bucket precisa existir previamente antes de realizar o deploy, ou seja criar o bucket manualmente
      name: '${self:custom.sharedBucketName}', // Deployment bucket name. Default is generated by the framework
      maxPreviousDeploymentArtifacts: 10, // On every deployment the framework prunes the bucket to remove artifacts older than this limit. The default is 5
      tags: {
        bucket: 'lambdas-artifacts',
      },
    },
    memorySize: 1536,
    logRetentionInDays: 30,
    versionFunctions: false,
    apiGateway: {
      shouldStartNameWithService: true,
      minimumCompressionSize: 1024,
      apiKeys: [
        {
          name: 'SQSExample',
          value: 'mykeyasdf898asfda90sdfjijklajsdfa9a',
          description:
            'Essa api key é utilizada para acessar o serviço de SQSExample',
        },
      ],
    },
    timeout: 30,
    environment: {
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1',
    },
  },

  functions: {
    app: {
      tags: {
        function: 'sqs-example-app',
      },
      role: 'LambdaRole',
      handler: 'src/server.handler',
      events: [
        {
          http: {
            method: 'post',
            path: '/task-proccess',
            private: true,
            cors: {
              origin: '*',
              maxAge: 86400,
            },
          },
        },
      ],
    },
    process_tasks: {
      tags: {
        function: 'sqs-example-process_tasks',
      },
      role: 'LambdaRole',
      reservedConcurrency: 1,
      timeout: 20,
      name: 'sqs-example-process_task',
      handler: 'src/queue/task/processTasksSuccess.process',
      events: [
        {
          sqs: {
            arn: {
              'Fn::GetAtt': ['SQSExampleProcessTasksQueue', 'Arn'],
            },
            batchSize: 1,
          },
        },
      ],
    },
    catch_queue_errors: {
      tags: {
        function: 'sqs-example-catch_queue_errors',
      },
      role: 'LambdaRole',
      reservedConcurrency: 10,
      maximumRetryAttempts: 2,
      timeout: 60,
      name: 'sqs-example-catch_queue_errors',
      handler: 'src/dlq/catchErrorQueue.process',
      events: [
        {
          sqs: {
            arn: {
              'Fn::GetAtt': ['SQSExampleProcessTasksQueueDead', 'Arn'],
            },
          },
        },
      ],
    },
  },
  resources: {
    Resources: {
      SQSExampleProcessTasksQueue: {
        Type: 'AWS::SQS::Queue',
        Properties: {
          QueueName: 'SQSExampleProcessTasksQueue',
          VisibilityTimeout: 3600,
          MessageRetentionPeriod: 1209600,
          RedrivePolicy: {
            deadLetterTargetArn: {
              'Fn::GetAtt': ['SQSExampleProcessTasksQueueDead', 'Arn'],
            },
            maxReceiveCount: 1,
          },
        },
      },
      SQSExampleProcessTasksQueueDead: {
        Type: 'AWS::SQS::Queue',
        Properties: {
          QueueName: 'SQSExampleProcessTasksQueueDead',
          VisibilityTimeout: 3600,
          MessageRetentionPeriod: 1209600,
          DelaySeconds: 5,
        },
      },
      LambdaRole: {
        Type: 'AWS::IAM::Role',
        Properties: {
          RoleName: 'SQSExample',
          AssumeRolePolicyDocument: {
            Version: '2012-10-17',
            Statement: {
              Effect: 'Allow',
              Principal: {
                Service: ['lambda.amazonaws.com'],
              },
              Action: 'sts:AssumeRole',
            },
          },

          Policies: [
            {
              PolicyName: 'sqs-example-policy',
              PolicyDocument: {
                Version: '2012-10-17',
                Statement: [
                  {
                    Effect: 'Allow',
                    Action: [
                      'logs:createLogGroup',
                      'logs:createLogStream',
                      'logs:putLogEvents',
                      'ec2:CreateNetworkInterface',
                      'ec2:DescribeNetworkInterfaces',
                      'ec2:DeleteNetworkInterface',
                    ],
                    Resource: '*',
                  },
                  {
                    Effect: 'Allow',
                    Action: [
                      'sqs:sendMessage',
                      'sqs:deleteMessage',
                      'sqs:getQueueAttributes',
                      'sqs:receiveMessage',
                    ],
                    Resource:
                      'arn:aws:sqs:us-east-1:*:SQSExampleProcessTasksQueue',
                  },
                  {
                    Effect: 'Allow',
                    Action: [
                      'sqs:sendMessage',
                      'sqs:deleteMessage',
                      'sqs:getQueueAttributes',
                      'sqs:receiveMessage',
                    ],
                    Resource:
                      'arn:aws:sqs:us-east-1:*:SQSExampleProcessTasksQueueDead',
                  },
                ],
              },
            },
          ],
        },
      },
    },
  },
};

module.exports = serverlessConfiguration;
