import type { AWS } from '@serverless/typescript';

const serverlessConfiguration: AWS = {
  service: 's3select-example',
  useDotenv: true,
  variablesResolutionMode: '20210219',
  configValidationMode: 'warn',
  frameworkVersion: '*',
  custom: {
    webpack: {
      webpackConfig: './webpack.config.js',
      includeModules: true,
      forceExclude: ['aws-sdk', 'sqlite3'],
      exculdeFiles: './src/modules/**/services/**/*.spec.ts',
    },
    apiGatewayTags: {
      Owner: 'mrcarromesa',
      Product: 'S3selectExample',
      Service: 'S3selectExample',
    },
    profiles: {
      local: 'local',
      dev: 'dev',
    },
    sharedBucketName: 'lambda-artifacts-123409abdvlgf',
    s3SelectBucketName: '${env:S3_BUCKET_S3_SELECT}',
  },

  plugins: [
    'serverless-webpack',
    'serverless-offline',
    'serverless-dotenv-plugin',
  ],
  provider: {
    name: 'aws',
    runtime: 'nodejs12.x',
    region: 'us-east-1',
    profile: "${self:custom.profiles.${env:stage, 'dev'}, 'default'}",
    deploymentBucket: {
      blockPublicAccess: true, // Prevents public access via ACLs or bucket policies. Default is false
      skipPolicySetup: false, // Prevents creation of default bucket policy when framework creates the deployment bucket. Default is false
      // Pelo visto o bucket precisa existir previamente antes de realizar o deploy, ou seja criar o bucket manualmente
      name: '${self:custom.sharedBucketName}', // Deployment bucket name. Default is generated by the framework
      maxPreviousDeploymentArtifacts: 10, // On every deployment the framework prunes the bucket to remove artifacts older than this limit. The default is 5
      tags: {
        bucket: 'lambdas-artifacts',
      },
    },
    memorySize: 1536,
    logRetentionInDays: 30,
    versionFunctions: false,
    apiGateway: {
      shouldStartNameWithService: true,
      minimumCompressionSize: 1024,
    },
    apiKeys: [
      {
        name: 'S3selectExample',
        value: 'mykeyasdf898asfda90sdfjijklajsdfa9b',
        description:
          'Essa api key é utilizada para acessar o serviço de S3selectExample',
      },
    ],
    timeout: 30,
    environment: {
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1',
    },
  },

  functions: {
    app: {
      tags: {
        function: 's3select-example-app',
      },
      role: 'LambdaRole',
      handler: 'src/server.handler',
      events: [
        {
          http: {
            method: 'post',
            path: '/task',
            private: true,
            cors: {
              origin: '*',
              maxAge: 86400,
            },
          },
        },
        {
          http: {
            method: 'get',
            path: '/task',
            private: true,
            request: {
              parameters: {
                querystrings: {
                  limit: true,
                  last_key: true,
                },
              },
            },
            cors: {
              origin: '*',
              maxAge: 86400,
            },
          },
        },
        {
          http: {
            method: 'delete',
            path: '/task',
            private: true,
            cors: {
              origin: '*',
              maxAge: 86400,
            },
          },
        },
        {
          http: {
            method: 'get',
            path: '/task/{id}',
            private: true,
            request: {
              parameters: {
                paths: {
                  id: true,
                },
              },
            },
            cors: {
              origin: '*',
              maxAge: 86400,
            },
          },
        },
        {
          http: {
            method: 'get',
            path: '/task/category/{category}',
            private: true,
            request: {
              parameters: {
                paths: {
                  category: true,
                },
              },
            },
            cors: {
              origin: '*',
              maxAge: 86400,
            },
          },
        },
      ],
    },
    trigger_lambda: {
      tags: {
        function: 's3select-example-trigger-lambda',
      },
      handler: 'src/triggersLambda/processTrigger.process',
      events: [
        {
          s3: {
            bucket: '${self:custom.s3SelectBucketName}',
            existing: true,
            event: 's3:ObjectCreated:*',
            // event: 's3:ObjectRemoved:*', // s3:ObjectRemoved:* || s3:ObjectCreated:*, s3:ObjectCreated:* quando não informado
          },
        },
      ],
    },
    trigger_remove_file_lambda: {
      tags: {
        function: 's3select-example-trigger-remove-file-lambda',
      },
      handler: 'src/triggersLambda/processTrigger.process',
      events: [
        {
          s3: {
            bucket: '${self:custom.s3SelectBucketName}',
            event: 's3:ObjectRemoved:*',
            existing: true,
          },
        },
      ],
    },
  },
  resources: {
    Resources: {
      UploadS3SelectBucket: {
        Type: 'AWS::S3::Bucket',
        DeletionPolicy: 'Retain',
        Properties: {
          BucketName: '${self:custom.s3SelectBucketName}',
          AccessControl: 'Private',
          Tags: [
            {
              Key: 's3SelectExample',
              Value: 'Example of s3 Select',
            },
          ],
          PublicAccessBlockConfiguration: {
            BlockPublicAcls: true,
            BlockPublicPolicy: true,
            IgnorePublicAcls: true,
            RestrictPublicBuckets: true,
          },
          CorsConfiguration: {
            CorsRules: [
              {
                AllowedMethods: ['HEAD'],
                AllowedOrigins: ['*'],
                AllowedHeaders: ['*'],
              },
            ],
          },
          LifecycleConfiguration: {
            Rules: [
              {
                Prefix: 'tmp/',
                Status: 'Enabled',
                ExpirationInDays: 1,
              },
            ],
          },
        },
      },
      LambdaRole: {
        Type: 'AWS::IAM::Role',
        Properties: {
          RoleName: 'S3selectExample',
          AssumeRolePolicyDocument: {
            Version: '2012-10-17',
            Statement: {
              Effect: 'Allow',
              Principal: {
                Service: ['lambda.amazonaws.com'],
              },
              Action: 'sts:AssumeRole',
            },
          },

          Policies: [
            {
              PolicyName: 's3select-example-policy',
              PolicyDocument: {
                Version: '2012-10-17',
                Statement: [
                  {
                    Effect: 'Allow',
                    Action: [
                      'logs:createLogGroup',
                      'logs:createLogStream',
                      'logs:putLogEvents',
                      'ec2:CreateNetworkInterface',
                      'ec2:DescribeNetworkInterfaces',
                      'ec2:DeleteNetworkInterface',
                    ],
                    Resource: '*',
                  },
                  {
                    Effect: 'Allow',
                    Action: [
                      's3:PutObject',
                      's3:GetObject',
                      's3:ListBucket',
                      's3:DeleteObject',
                      's3:DeleteObjectVersion',
                      's3:PutLifecycleConfiguration',
                    ],
                    Resource:
                      'arn:aws:s3:::${self:custom.s3SelectBucketName}/*',
                  },
                ],
              },
            },
          ],
        },
      },
    },
  },
};

module.exports = serverlessConfiguration;
